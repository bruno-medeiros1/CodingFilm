// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Utad.Lab.CodingFilm.Data;

namespace Utad.Lab.CodingFilm.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.13")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Grupo_de_Utilizadores");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Utilizadores");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("Utilizador_Grupo_de_Utilizadores");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Utad.Lab.CodingFilm.Areas.Admin.Models.Categoria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Categoria");
                });

            modelBuilder.Entity("Utad.Lab.CodingFilm.Areas.Admin.Models.CategoriasFavoritas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CategoriaID")
                        .HasColumnType("int");

                    b.Property<int?>("CategoriasFavoritas_UtilizadorID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaID");

                    b.HasIndex("CategoriasFavoritas_UtilizadorID");

                    b.ToTable("CategoriasFavoritas");
                });

            modelBuilder.Entity("Utad.Lab.CodingFilm.Areas.Admin.Models.CategoriasFavoritas_Utilizador", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("UtilizadorID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UtilizadorID");

                    b.ToTable("CategoriasFavoritas_Utilizador");
                });

            modelBuilder.Entity("Utad.Lab.CodingFilm.Areas.Admin.Models.Categorias_Utilizador", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CategoriaID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime2");

                    b.Property<string>("UtilizadorID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaID");

                    b.HasIndex("UtilizadorID");

                    b.ToTable("Categorias_Utilizador");
                });

            modelBuilder.Entity("Utad.Lab.CodingFilm.Areas.Admin.Models.Cria_Utilizadores", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime2");

                    b.Property<string>("Utilizador1ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Utilizador2ID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Utilizador1ID");

                    b.HasIndex("Utilizador2ID");

                    b.ToTable("Cria_Utilizadores");
                });

            modelBuilder.Entity("Utad.Lab.CodingFilm.Areas.Admin.Models.Filme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CategoriaID")
                        .HasColumnType("int");

                    b.Property<string>("Descrição")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<TimeSpan?>("Duração")
                        .IsRequired()
                        .HasColumnType("time(1)");

                    b.Property<byte[]>("Foto")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Realizador")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<DateTime?>("dataEstreia")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("pais")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("trailerLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaID");

                    b.ToTable("Filme");
                });

            modelBuilder.Entity("Utad.Lab.CodingFilm.Areas.Admin.Models.Filmes_Utilizador", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime2");

                    b.Property<int?>("FilmeID")
                        .HasColumnType("int");

                    b.Property<string>("UtilizadorID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("FilmeID");

                    b.HasIndex("UtilizadorID");

                    b.ToTable("Filmes_Utilizador");
                });

            modelBuilder.Entity("Utad.Lab.CodingFilm.Areas.Admin.Models.Sala", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Capacidade")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("lugaresDisponiveis")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Sala");
                });

            modelBuilder.Entity("Utad.Lab.CodingFilm.Areas.Admin.Models.Salas_Utilizador", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime2");

                    b.Property<int?>("SalaID")
                        .HasColumnType("int");

                    b.Property<string>("UtilizadorID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("SalaID");

                    b.HasIndex("UtilizadorID");

                    b.ToTable("Salas_Utilizador");
                });

            modelBuilder.Entity("Utad.Lab.CodingFilm.Areas.Admin.Models.Sessão", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime2");

                    b.Property<int?>("FilmeID")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("Horário")
                        .HasColumnType("time");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("SalaID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FilmeID");

                    b.HasIndex("SalaID");

                    b.ToTable("Sessão");
                });

            modelBuilder.Entity("Utad.Lab.CodingFilm.Areas.Admin.Models.Sessões_Utilizador", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime2");

                    b.Property<int?>("SessãoID")
                        .HasColumnType("int");

                    b.Property<string>("UtilizadorID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("SessãoID");

                    b.HasIndex("UtilizadorID");

                    b.ToTable("Sessões_Utilizador");
                });

            modelBuilder.Entity("Utad.Lab.WebApp.Models.Perfil", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Morada")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal?>("Nif")
                        .HasColumnType("numeric(9,0)")
                        .HasColumnName("NIF");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("UtilizadoresID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UtilizadoresID");

                    b.ToTable("Perfil");
                });

            modelBuilder.Entity("Utad.Lab.CodingFilm.Models.Utilizador", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<byte[]>("FotoPerfil")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("UsernameChangeLimit")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("Utilizador");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Utad.Lab.CodingFilm.Areas.Admin.Models.CategoriasFavoritas", b =>
                {
                    b.HasOne("Utad.Lab.CodingFilm.Areas.Admin.Models.Categoria", "Categoria")
                        .WithMany()
                        .HasForeignKey("CategoriaID");

                    b.HasOne("Utad.Lab.CodingFilm.Areas.Admin.Models.CategoriasFavoritas_Utilizador", "CategoriaFavoritaID")
                        .WithMany()
                        .HasForeignKey("CategoriasFavoritas_UtilizadorID");

                    b.Navigation("Categoria");

                    b.Navigation("CategoriaFavoritaID");
                });

            modelBuilder.Entity("Utad.Lab.CodingFilm.Areas.Admin.Models.CategoriasFavoritas_Utilizador", b =>
                {
                    b.HasOne("Utad.Lab.CodingFilm.Models.Utilizador", "Utilizador")
                        .WithMany()
                        .HasForeignKey("UtilizadorID");

                    b.Navigation("Utilizador");
                });

            modelBuilder.Entity("Utad.Lab.CodingFilm.Areas.Admin.Models.Categorias_Utilizador", b =>
                {
                    b.HasOne("Utad.Lab.CodingFilm.Areas.Admin.Models.Categoria", "Categoria")
                        .WithMany()
                        .HasForeignKey("CategoriaID");

                    b.HasOne("Utad.Lab.CodingFilm.Models.Utilizador", "Utilizador")
                        .WithMany()
                        .HasForeignKey("UtilizadorID");

                    b.Navigation("Categoria");

                    b.Navigation("Utilizador");
                });

            modelBuilder.Entity("Utad.Lab.CodingFilm.Areas.Admin.Models.Cria_Utilizadores", b =>
                {
                    b.HasOne("Utad.Lab.CodingFilm.Models.Utilizador", "Utilizador1")
                        .WithMany()
                        .HasForeignKey("Utilizador1ID");

                    b.HasOne("Utad.Lab.CodingFilm.Models.Utilizador", "Utilizador2")
                        .WithMany()
                        .HasForeignKey("Utilizador2ID");

                    b.Navigation("Utilizador1");

                    b.Navigation("Utilizador2");
                });

            modelBuilder.Entity("Utad.Lab.CodingFilm.Areas.Admin.Models.Filme", b =>
                {
                    b.HasOne("Utad.Lab.CodingFilm.Areas.Admin.Models.Categoria", "Categoria")
                        .WithMany()
                        .HasForeignKey("CategoriaID");

                    b.Navigation("Categoria");
                });

            modelBuilder.Entity("Utad.Lab.CodingFilm.Areas.Admin.Models.Filmes_Utilizador", b =>
                {
                    b.HasOne("Utad.Lab.CodingFilm.Areas.Admin.Models.Filme", "Filme")
                        .WithMany()
                        .HasForeignKey("FilmeID");

                    b.HasOne("Utad.Lab.CodingFilm.Models.Utilizador", "Utilizador")
                        .WithMany()
                        .HasForeignKey("UtilizadorID");

                    b.Navigation("Filme");

                    b.Navigation("Utilizador");
                });

            modelBuilder.Entity("Utad.Lab.CodingFilm.Areas.Admin.Models.Salas_Utilizador", b =>
                {
                    b.HasOne("Utad.Lab.CodingFilm.Areas.Admin.Models.Sala", "Sala")
                        .WithMany()
                        .HasForeignKey("SalaID");

                    b.HasOne("Utad.Lab.CodingFilm.Models.Utilizador", "Utilizador")
                        .WithMany()
                        .HasForeignKey("UtilizadorID");

                    b.Navigation("Sala");

                    b.Navigation("Utilizador");
                });

            modelBuilder.Entity("Utad.Lab.CodingFilm.Areas.Admin.Models.Sessão", b =>
                {
                    b.HasOne("Utad.Lab.CodingFilm.Areas.Admin.Models.Filme", "Filme")
                        .WithMany()
                        .HasForeignKey("FilmeID");

                    b.HasOne("Utad.Lab.CodingFilm.Areas.Admin.Models.Sala", "Sala")
                        .WithMany()
                        .HasForeignKey("SalaID");

                    b.Navigation("Filme");

                    b.Navigation("Sala");
                });

            modelBuilder.Entity("Utad.Lab.CodingFilm.Areas.Admin.Models.Sessões_Utilizador", b =>
                {
                    b.HasOne("Utad.Lab.CodingFilm.Areas.Admin.Models.Sessão", "Sessão")
                        .WithMany()
                        .HasForeignKey("SessãoID");

                    b.HasOne("Utad.Lab.CodingFilm.Models.Utilizador", "Utilizador")
                        .WithMany()
                        .HasForeignKey("UtilizadorID");

                    b.Navigation("Sessão");

                    b.Navigation("Utilizador");
                });

            modelBuilder.Entity("Utad.Lab.WebApp.Models.Perfil", b =>
                {
                    b.HasOne("Utad.Lab.CodingFilm.Models.Utilizador", "utilizador")
                        .WithMany()
                        .HasForeignKey("UtilizadoresID");

                    b.Navigation("utilizador");
                });
#pragma warning restore 612, 618
        }
    }
}
